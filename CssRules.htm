<!DOCTYPE HTML>
<html>
<head>
	<title>CSSRules.js</title>
	<meta charset="UTF-8">
	<link rel="stylesheet" type="text/css" href="css/page.css">
	<link rel="stylesheet" type="text/css" href="css/doc.css">
	<link rel="stylesheet" type="text/css" href="css/unittest.css">
</head>
<body>

<ul class="pageMenu">
	<li><a href="index.htm">JS.Objects</a></li>
	<li onclick="goTo( eDoc )" id="eDocMenu">Documentation</li>
	<li onclick="goTo( eUnitTest )" id="eUnitTestMenu">Testes unitaires</li>
	<li onclick="goTo( eBenchmarking )" id="eBenchmarkingMenu">Benchmarking</li>
</ul>

<page id="ePreload" class="active">
	chargement...
</page>

<page id="eDoc">
	<h1>Objet CSSRules</h1>
	<div id="eSummary1"></div>

	<div class="doc">
		<section>
			<p>Un objet CSSStyleSheet est créé pour ajouter de nouvelles règles. Il a pour attribut <var>title</var> 'CssRules'.</p>
		</section>
		<section><h2>Méthodes objet</h2>
			<section><h3>add (<var> sCssRules </var>)</h3>
				<p>Ajoute un ou plusieurs règle(s) CSS.</p>
				<dl>
					<dt><var>sCssRules</var> <i>String</i> - Règle(s) css.</dt>
				</dl>
				<p>Retourne un objet CSSStyleDeclaration ou plusieurs dans un tableau.</p>
				<p>Il est possible d'accéder à la l'objet CSSStyleRule parent avec l'attribut <var>parentRule</var>.</p>
			</section>
			<section><h3>disable (<var> bDisable=true, sAttr='title'||'href', rePattern=/CssRules/ </var>)</h3>
				<p>Désactive ou active un objet CSSStyleSheet en fonction d'une expression régulière.</p>
				<dl>
					<dt><var>bDisable</var> <i>Boolean</i> - indique si il faut désactivé l'objet CSSStyleSheet.</dt>
					<dt><var>sAttr</var> <i>String</i> - attribut d'un objet CSSStyleSheet.</dt>
					<dt><var>rePattern</var> <i>RegExp</i> - expression à trouvé dans l'attribut.</dt>
				</dl>
				<p>Retourne un objet CSSStyleSheet ou <code>null</code> si aucun objet n'est trouvé.</p>
			</section>
			<section><h3>get (<var> sSelector, bDelete=false </var>)</h3>
				<p>Récupère un objet CSSStyleDeclaration d'un objet CSSStyleRule (propriété <var>style</var>) .</p>
				<dl>
					<dt><var>sSelector</var> <i>String</i> - Sélecteur css (Premier trouvé, premier renvoyé).</dt>
					<dt><var>bDelete</var> <i>Boolean</i> - Indique qu'il faut effacer la règle.</dt>
				</dl>
				<p>Retourne un objet CSSStyleDeclaration, <code>null</code> si aucun objet n'est trouvé ou <code>undefined</code> si l'objet est effacé.</p>
			</section>
			<section><h3>remove (<var> ... </var>)</h3>
				<p>Efface un ou plusieurs objet(s) CSSStyleRule.</p>
				<dl>
					<dt><var>sSelector1</var> <i>String</i> - Sélecteur css (Premier trouvé, premier renvoyé).</dt>
					<dt>...</dt>
				</dl>
				<p>Retourne <code>undefined</code>.</p>
			</section>
		</section>
	</div>
</page>
<page id="eUnitTest">
	<h1>Testes unitaires</h1>
	<div id="eSummary2"></div>
</page>
<page id="eBenchmarking">
	<h1>Benchmarking</h1>
	<div id="eSummary3"></div>
</page>

<script src="src/CssRules.js"></script>
<script src="src/Style.js"></script>
<script src="js/page.js"></script>
<script src="js/doc.js"></script>
<script src="js/unittest.js"></script>
<script src="js/benchmark.js"></script>
<script>
// DOCUMENTATION
layoutDoc( eSummary1, { numbers: false, links: true }, eDoc )

// TESTS UNITAIRES
new UnitTest( eUnitTest,[
	{ desc:"<b>NB</b>: Sur Firefox le constructeur CSSStyleDeclaration s'appelle CSS2Properties." },
	{ title:"CssRules",
		desc:'Aperçu des classes CSS : <span class="test1">.test1</span><span class="test2">.test2</span><span class="test3">.test3</span><span class="test4">.test4</span>',
		list:[
			{ eval:
`window.f = function( mCSSStyleDeclaration , m ){
	if( m.constructor == String ) return mCSSStyleDeclaration.cssText === m
	// m.constructor == Array 
	let b = true
	m.forEach( ( s , i )=>{
		b &&= mCSSStyleDeclaration[i].cssText === s
		})
	return b
	}`},
			{ title:".add",
				assertions:[
					"f( CssRules.add( '.test1 { opacity:.5; }'), 'opacity: 0.5;')",
					"f( CssRules.add( '.test1 { color:red; }'), 'opacity: 0.5; color: red;')",
					"f( CssRules.add( '.test2 { opacity:.5; }'), 'opacity: 0.5;')",
					"f( CssRules.add( '.test2 { color:blue; }'), 'opacity: 0.5; color: blue;')",
					"f( CssRules.add( '.test3 { opacity:.5; } .test4 { color:lime; }'), ['opacity: 0.5;','color: lime;'])",
					"CssRules.add( '.test1 { opacity:.5; }').constructor === CSSStyleDeclaration",
					"CssRules.add( '.test1 { opacity:.5; }').parentRule.constructor === CSSStyleRule",
					"CssRules.add( '.test1 { opacity:.5; }').parentRule.parentStyleSheet.constructor === CSSStyleSheet",
					]
				},
			{ title:".disable",
				assertions:[
					"CssRules.disable().disabled == true",
					"CssRules.disable( false ).disabled == false",
					"CssRules.disable( true, 'title', /CssRules/ ).constructor === CSSStyleSheet ",
					"CssRules.disable( false, 'title', /CssRules/ ).constructor === CSSStyleSheet ",
					"CssRules.disable( true, 'title', /CssRules2/ ) == null"
					]
				},
			{ title:".get",
				assertions:[
					"f( CssRules.get( '.test1' ), 'opacity: 0.5; color: red;' )",
					"f( CssRules.get( '.test2' ), 'opacity: 0.5; color: blue;' )",
					"f( CssRules.get( '.test3' ), 'opacity: 0.5;' )",
					"f( CssRules.get( '.test4' ), 'color: lime;' )",
					"CssRules.get( '.test1' ).constructor === CSSStyleDeclaration",
					"CssRules.get( '.test5' ) === null"
					]
				},
			{ title:".remove",
				assertions:[
					"CssRules.remove( '.test4' ) === undefined",
					"CssRules.remove( '.test5' ) === undefined"
					]
				},
			],
	}],
	{ unittest:1, benchmark: 0 }
	)

layoutDoc( eSummary2, { numbers: false, links: true }, eUnitTest )


// BENCHMARKING
new UnitTest( eBenchmarking ,[
	{ title:"CssRules",
		desc:'Aperçu des classes CSS : <span class="test21">.test21</span><span class="test22">.test22</span><span class="test23">.test23</span><span class="test24">.test24</span>',
		list:[
			{ title:".add",
				assertions:[
					"CssRules.add( '.test21 { opacity:.5; }')",
					"CssRules.add( '.test21 { color:red; }')",
					"CssRules.add( '.test22 { opacity:.5; }')",
					"CssRules.add( '.test22 { color:blue; }')",
					"CssRules.add( '.test23 { opacity:.5; } .test24 { color:lime; }')"
					]
				},
			{ title:".disable",
				assertions:[
					"CssRules.disable()",
					"CssRules.disable( true, 'title', /CssRules/ )",
					"CssRules.disable( false, 'title', /CssRules/ )",
					"CssRules.disable( true, 'title', /CssRules2/ )"
					]
				},
			{ title:".get",
				assertions:[
					"CssRules.get( '.test21' )",
					"CssRules.get( '.test22' )",
					"CssRules.get( '.test23' )",
					"CssRules.get( '.test24' )",
					"CssRules.get( '.test25' )"
					]
				},
			{ title:".remove",
				assertions:[
					"CssRules.remove( '.test24' )",
					"CssRules.remove( '.test25' )"
					]
				},
			],
		}
	],
	{ unittest:0, benchmark: 1 }
	)

layoutDoc( eSummary3, { numbers: false, links: true }, eBenchmarking )

/*
Une fois le code charger, afficher de la page d'accueil !!
... sans setTimeout SVP !
*/
setTimeout( ()=>goTo( eDoc ), 10 )
</script>

</body>
</html>