<!DOCTYPE HTML>
<html>
<head>
	<title>JS.Game - Editeur de sprites</title>
	<meta charset="UTF-8">
	<link rel="stylesheet" type="text/css" href="css/doc.css">
</head>
<body>

<button id="Btn_saveFile">saveFile</button>
<textarea id="add-text"></textarea>

<button id="Btn_addToFolder">addToFolder</button>
<div id="folder-info"></div>

<script src="js/doc.js"></script>
<script>
let fError = e=>console.log('Error',e)

let saveFile;
document.getElementById('Btn_saveFile').addEventListener('click', async () => {
	try {
		saveFile = await window.showSaveFilePicker({
			suggestedName: 'My First File.txt'
			});
		const file = await saveFile.getFile();
		const contents = await file.text();
		} catch(e) {
			console.log(e);
		}
	})

document.getElementById('add-text').addEventListener('keyup', async(e) => {
	if(typeof saveFile !== "undefined") {
		if ((await saveFile.queryPermission()) === 'granted') {
			const writable = await saveFile.createWritable();
			await writable.write(document.getElementById('add-text').value);
			await writable.close();
			}
		}
	})

let directory;
document.getElementById('Btn_addToFolder').addEventListener('click', async () => {
	try {
		directory = await window.showDirectoryPicker({
			startIn: 'desktop'
			});

		for await (const entry of directory.values()) {
			let newEl = document.createElement('div');
			newEl.innerHTML = `<strong>${entry.name}</strong> - ${entry.kind}`;
			document.getElementById('folder-info').append(newEl);
			}
		} catch(e) {
			console.log(e);
			}
	});

/*
// Creates a file
let newFile1 = directory.getFileHandle('newFile.txt', { create: true });
// Creates a directory
let newFile2 = directory.getDirectoryHandle('myNewDirectory');

// Deletes a folder, recursively (i.e. it will delete all within it as well)
directory.removeEntry('Some Directory', { recursive: true });
// Deletes a file
directory.removeEntry('SomeFile.html');
*/


/*
// Note: The file system has been prefixed as of Google Chrome 12:

// Request storage usage and capacity left
// Choose either Temporary or Persistent
navigator.webkitTemporaryStorage.queryUsageAndQuota (
	function(usedBytes, grantedBytes) {
		console.log('we are using ', usedBytes, ' of ', grantedBytes, 'bytes');
		},
	fError
	)
*/

window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;

// Request Quota (only for File System API)
var requestedBytes = 1024*1024*10 // 10MB

navigator.webkitPersistentStorage.requestQuota (
	requestedBytes,
	function( grantedBytes ){
		requestFileSystem( PERSISTENT, grantedBytes, ()=>{}, fError )
		},
	fError
	)

</script>

</body>
</html>