<!DOCTYPE HTML>
<html>
<head>
	<title>Style Object</title>
	<meta charset="UTF-8">
	<style><!--TESTING PURPOSE--></style>
	<link rel="stylesheet" type="text/css" href="css/page.css">
	<link rel="stylesheet" type="text/css" href="css/doc.css">
	<link rel="stylesheet" type="text/css" href="css/unittest.css">
</head>
<body>

<ul class="pageMenu">
	<li><a href="index.htm">JS.Objects</a></li>
	<li onclick="goTo( eDoc )">Objet Style</li>
	<li onclick="goTo( eUnitTest )">Testes unitaires</li>
	<li onclick="goTo( eBenchmarking )">Benchmarking</li>
</ul>

<page id="ePreload" class="active">
	chargement...
</page>

<page id="eDoc">
	<h1>Objet Style</h1>
	<div id="eSummary1"></div>

	<div class="doc">
		<section>
			...
		</section>
		<section><h2>Méthodes objet Style</h2>
		</section>
	</div>
</page>
<page id="eUnitTest">
	<h1>Testes unitaires</h1>
	<div id="eSummary2"></div>

</page>
<page id="eBenchmarking">
	<h1>Benchmarking</h1>
	<div id="eSummary3"></div>

	<ul style="position: absolute; top:-100em;">
		<li id="eTestClassName">#eTestClassName</li>
		<li id="eTestClassId">#eTestClassId</li>
		<li id="eTestStyle">#eTestStyle</li>
		<li id="eTestCssText">#eTestCssText</li>
	</ul>
</page>


<script src="src/Browser.js"></script>
<script src="src/Tag.js"></script>
<script src="src/CssRules.js"></script> <!-- -->
<script src="src/Style.js"></script>
<script src="js/page.js"></script>
<script src="js/doc.js"></script>
<script src="js/unittest.js"></script>
<script src="js/benchmark.js"></script>
<script>
// DOCUMENTATION
layoutDoc( eSummary1, { numbers: false, links: true }, eDoc )

// TESTS UNITAIRES
new UnitTest( eUnitTest,[
	{ title:"",
		desc:".",
		eval:
``,
		list:[]
		}
	],
	{ unittest:1, benchmark: 0 }
	)

layoutDoc( eSummary2, { numbers: false, links: true }, eUnitTest )


// BENCHMARKING
// Benchmark( eUnitTest, 'CODE' )
new UnitTest( eBenchmarking ,[
	{ title:"Style.get",
		desc:`Récupération des valeurs 'style' des éléments html : classe CSS, attribut <code>style</code>, et attribut <code>style.cssText</code>.<br>
			Rapidité : <code>style</code> puis <code>style.cssText</code> et classe CSS.`,
				eval:
`document.styleSheets[0].insertRule( \`.test {
	opacity:.5;
	font-size: 10px;
	padding: 10px;
	padding-left: 20px;
	border-width: 10px;
	left: 10px;
	top: 10px;
	height: 100px;
	width: 100px;
	}\`)
document.styleSheets[0].insertRule( \`#eTestClassId {
	opacity:.5;
	font-size: 10px;
	padding: 10px;
	padding-left: 20px;
	border-width: 10px;
	left: 10px;
	top: 10px;
	height: 100px;
	width: 100px;
	}\`)
eTestClassName.classList.add('test')
`,
		list:[
			{ title:"opacity",
				eval:
`eTestStyle.style.opacity=".5"
eTestCssText.style.cssText = "opacity: .5;"`,
				assertions:[
					`Style.get( eTestClassName, "opacity" )==0.5`,
					`Style.get( eTestClassId, "opacity" )==0.5`,
					`Style.get( eTestStyle, "opacity" )==0.5`,
					`Style.get( eTestCssText, "opacity" )==0.5`
					]},
			{ title:"font-size",
				eval:
`eTestStyle.style.fontSize="10px"
eTestCssText.style.cssText = "font-size: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "font-size" )=='10px'`,
					`Style.get( eTestClassName, "fontSize" )=='10px'`,
					`Style.get( eTestClassId, "font-size" )=='10px'`,
					`Style.get( eTestClassId, "fontSize" )=='10px'`,
					`Style.get( eTestStyle, "font-size" )=='10px'`,
					`Style.get( eTestStyle, "fontSize" )=='10px'`,
					`Style.get( eTestCssText, "font-size" )=='10px'`,
					`Style.get( eTestCssText, "fontSize" )=='10px'`
					]},
			{ title:"padding",
				eval:
`eTestStyle.style.padding="10px 10px 10px 20px"
eTestCssText.style.cssText = "padding: 10px 10px 10px 20px;"`,
				assertions:[
					`Style.get( eTestClassName, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestClassId, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestStyle, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestCssText, "padding" )=='10px 10px 10px 20px'`
					]},
			{ title:"paddingLeft",
				assertions:[
					`Style.get( eTestClassName, "padding-left" )=='20px'`,
					`Style.get( eTestClassName, "paddingLeft" )=='20px'`,
					`Style.get( eTestClassId, "padding-left" )=='20px'`,
					`Style.get( eTestClassId, "paddingLeft" )=='20px'`,
					`Style.get( eTestStyle, "padding-left" )=='20px'`,
					`Style.get( eTestStyle, "paddingLeft" )=='20px'`,
					`Style.get( eTestCssText, "padding-left" )=='20px'`,
					`Style.get( eTestCssText, "paddingLeft" )=='20px'`
					]},
			{ title:"border-width",
				eval:
`eTestStyle.style.borderWidth="10px"
eTestCssText.style.cssText = "border-width: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "border-width" )=='10px'`,
					`Style.get( eTestClassName, "borderWidth" )=='10px'`,
					`Style.get( eTestClassId, "border-width" )=='10px'`,
					`Style.get( eTestClassId, "borderWidth" )=='10px'`,
					`Style.get( eTestStyle, "borderWidth" )=='10px'`,
					`Style.get( eTestCssText, "borderWidth" )=='10px'`
					]},
			{ title:"width",
				eval:
`eTestStyle.style.width="100px"
eTestCssText.style.cssText = "width: 100px;"`,
				assertions:[
					`Style.get( eTestClassName, "width" )=='100px'`,
					`Style.get( eTestClassId, "width" )=='100px'`,
					`Style.get( eTestStyle, "width" )=='100px'`,
					`Style.get( eTestCssText, "width" )=='100px'`
					]},
			{ title:"height",
				eval:
`eTestStyle.style.height="100px"
eTestCssText.style.cssText = "height: 100px;"`,
				assertions:[
					`Style.get( eTestClassName, "height" )=='100px'`,
					`Style.get( eTestClassId, "height" )=='100px'`,
					`Style.get( eTestStyle, "height" )=='100px'`,
					`Style.get( eTestCssText, "height" )=='100px'`
					]},
			{ title:"left",
				eval:
`eTestStyle.style.left="10px"
eTestCssText.style.cssText = "left: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "left" )=='10px'`,
					`Style.get( eTestClassId, "left" )=='10px'`,
					`Style.get( eTestStyle, "left" )=='10px'`,
					`Style.get( eTestCssText, "left" )=='10px'`
					]},
			{ title:"top",
				eval:
`eTestStyle.style.top="10px"
eTestCssText.style.cssText = "top: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "top" )=='10px'`,
					`Style.get( eTestClassId, "top" )=='10px'`,
					`Style.get( eTestStyle, "top" )=='10px'`,
					`Style.get( eTestCssText, "top" )=='10px'`
					]},
			]
		}
	],
	{ unittest:1, benchmark: 1 }
	)

layoutDoc( eSummary3, { numbers: false, links: true }, eBenchmarking )




/*
Une fois le code charger, afficher de la page d'accueil !!
... sans setTimeout SVP !
*/
setTimeout( ()=>goTo( eDoc ), 10 )
</script>

</body>
</html>