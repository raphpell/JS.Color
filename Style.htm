<!DOCTYPE HTML>
<html>
<head>
	<title>Style.js</title>
	<meta charset="UTF-8">
	<style><!--TESTING PURPOSE: document.styleSheets[0].insertRule --></style>
	<style>
	.tests {
		position: fixed;
		top:-100em;
		right:0;
		}
	.tests LI {
		border-color: red;
		border-style: dashed;
		margin: 1px;
		}
	</style>
	<link rel="stylesheet" type="text/css" href="css/page.css">
	<link rel="stylesheet" type="text/css" href="css/doc.css">
	<link rel="stylesheet" type="text/css" href="css/unittest.css">
</head>
<body>

<ul class="pageMenu">
	<li><a href="index.htm">JS.Objects</a></li>
	<li onclick="goTo( eDoc )">Documentation</li>
	<li onclick="goTo( eUnitTest )">Testes unitaires</li>
</ul>

<page id="ePreload" class="active">
	chargement...
</page>

<page id="eDoc">
	<h1>Objet Style</h1>
	<div id="eSummary1"></div>

	<div class="doc">
		<section>
			<p>L'objet Style est un objet simple avec des méthodes. Il sert à manipuler les attributs d'une propriété style d'un objet.</p>
		</section>
		<section><h2>Méthodes objet</h2>

			<section><h3>get ( e, sAttr )</h3>
				<p>Récupère la valeur d'un attribut CSS d'un élément html.</p>
				<dl>
					<dt><var>e</var> <i>HTMLElement</i> - élément html .</dt>
					<dt><var>sAttr</var> <i>Mixte</i> - attribut CSS.</dt>
				</dl>
				<p>Retourne un chaîne contenant la valeur ou null.</p>
			</section>

			<section><h3>getNameSpaceCSS ( sJsAttr )</h3>
				<p>Retourne le nom d'un attribut CSS depuis un attribut JS.</p>
				<dl>
					<dt><var>sJsAttr</var> <i>String</i> - attribut JS.</dt>
				</dl>
			</section>

			<section><h3>getNameSpaceJS ( sCssAttr )</h3>
				<p>Retourne le nom d'un attribut JS depuis un attribut CSS.</p>
				<dl>
					<dt><var>sCssAttr</var> <i>String</i> - attribut CSS.</dt>
				</dl>
			</section>

			<section><h3>remove ( m, s )</h3>
				<p>Efface un attribut CSS d'un objet.</p>
				<dl>
					<dt><var>m</var> <i>Mixte</i> - Elément <var>HTML</var>, instance <var>CSSStyleRule</var> (objet possédant un attribut style) ou instance <var>CSSStyleDeclaration</var>.</dt>
					<dt><var>s</var> <i>String</i> - attribut CSS.</dt>
				</dl>
				<p>Retourne la valeur cssText résultante.</p>
			</section>

			<section><h3>set ( m, s )</h3>
				<p>Défini la valeur d'un ou plusieurs attribut CSS d'un objet .</p>
				<dl>
					<dt><var>m</var> <i>Mixte</i> - Elément <var>HTML</var>, instance <var>CSSStyleRule</var> (objet possédant un attribut style) ou instance <var>CSSStyleDeclaration</var>.</dt>
					<dt><var>s</var> <i>String</i> - une ou plusieurs déclaration(s) CSS.</dt>
				</dl>
				<p>Retourne la valeur cssText résultante.</p>
			</section>

			<section><h3>validate ( sAttrCSS, mValue )</h3>
				<p>Valide la valeur d'un attribut... expérimental.</p>
				<dl>
					<dt><var>sAttrCSS</var> <i>String</i> - Nom de l'attribut CSS.</dt>
					<dt><var>mValue</var> <i>Mixte</i> - Valeur.</dt>
				</dl>
				<p>Retourne une chaîne de la forme 'font-size:10px;'.</p>
			</section>

		</section>
	</div>
</page>
<page id="eUnitTest">
	<h1>Testes unitaires</h1>
	<div id="eSummary2"></div>

	<ul class="tests">
		<li id="eTestClassName">#eTestClassName</li>
		<li id="eTestClassId">#eTestClassId</li>
		<li id="eTestStyle">#eTestStyle</li>
		<li id="eTestCssText">#eTestCssText</li>
		<li id="eTest">#eTest</li>
		<li id="eTest2">#eTest2</li>
	</ul>

</page>

<!-- <script src="src/Browser.js"></script> -->
<script src="src/CssRules.js"></script>
<script src="src/Style.js"></script>
<script src="js/page.js"></script>
<script src="js/doc.js"></script>
<script src="js/unittest.js"></script>
<script src="js/benchmark.js"></script>
<script>
// DOCUMENTATION
layoutDoc( eSummary1, { numbers: false, links: true }, eDoc )

// TESTS UNITAIRES
new UnitTest( eUnitTest,[
	{ title:"Style.get",
		desc:'Récupération des valeurs style des éléments html : classe CSS, attribut <code>style</code>, et attribut <code>style.cssText</code>.<br>'
			+'Rapidité : <code>style</code> puis <code>style.cssText</code> et classe CSS.',
				eval:
`document.styleSheets[0].insertRule( \`.test {
	opacity:.5;
	font-size: 10px;
	padding: 10px;
	padding-left: 20px;
	border-width: 10px;
	left: 10px;
	top: 10px;
	height: 100px;
	width: 100px;
	}\`)
document.styleSheets[0].insertRule( \`#eTestClassId {
	opacity:.5;
	font-size: 10px;
	padding: 10px;
	padding-left: 20px;
	border-width: 10px;
	left: 10px;
	top: 10px;
	height: 100px;
	width: 100px;
	}\`)
eTestClassName.classList.add('test')
`,
		list:[
			{ title:"opacity",
				eval:
`eTestStyle.style.opacity=".5"
eTestCssText.style.cssText = "opacity: .5;"`,
				assertions:[
					`Style.get( eTestClassName, "opacity" )==0.5`,
					`Style.get( eTestClassId, "opacity" )==0.5`,
					`Style.get( eTestStyle, "opacity" )==0.5`,
					`Style.get( eTestCssText, "opacity" )==0.5`
					]},
			{ title:"font-size",
				eval:
`eTestStyle.style.fontSize="10px"
eTestCssText.style.cssText = "font-size: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "font-size" )=='10px'`,
					`Style.get( eTestClassName, "fontSize" )=='10px'`,
					`Style.get( eTestClassId, "font-size" )=='10px'`,
					`Style.get( eTestClassId, "fontSize" )=='10px'`,
					`Style.get( eTestStyle, "font-size" )=='10px'`,
					`Style.get( eTestStyle, "fontSize" )=='10px'`,
					`Style.get( eTestCssText, "font-size" )=='10px'`,
					`Style.get( eTestCssText, "fontSize" )=='10px'`
					]},
			{ title:"padding",
				eval:
`eTestStyle.style.padding="10px 10px 10px 20px"
eTestCssText.style.cssText = "padding: 10px 10px 10px 20px;"`,
				assertions:[
					`Style.get( eTestClassName, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestClassId, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestStyle, "padding" )=='10px 10px 10px 20px'`,
					`Style.get( eTestCssText, "padding" )=='10px 10px 10px 20px'`
					]},
			{ title:"paddingLeft",
				assertions:[
					`Style.get( eTestClassName, "padding-left" )=='20px'`,
					`Style.get( eTestClassName, "paddingLeft" )=='20px'`,
					`Style.get( eTestClassId, "padding-left" )=='20px'`,
					`Style.get( eTestClassId, "paddingLeft" )=='20px'`,
					`Style.get( eTestStyle, "padding-left" )=='20px'`,
					`Style.get( eTestStyle, "paddingLeft" )=='20px'`,
					`Style.get( eTestCssText, "padding-left" )=='20px'`,
					`Style.get( eTestCssText, "paddingLeft" )=='20px'`
					]},
			{ title:"border-width",
				eval:
`eTestStyle.style.borderWidth="10px"
eTestCssText.style.cssText = "border-width: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "border-width" )=='10px'`,
					`Style.get( eTestClassName, "borderWidth" )=='10px'`,
					`Style.get( eTestClassId, "border-width" )=='10px'`,
					`Style.get( eTestClassId, "borderWidth" )=='10px'`,
					`Style.get( eTestStyle, "borderWidth" )=='10px'`,
					`Style.get( eTestCssText, "borderWidth" )=='10px'`
					]},
			{ title:"width",
				eval:
`eTestStyle.style.width="100px"
eTestCssText.style.cssText = "width: 100px;"`,
				assertions:[
					`Style.get( eTestClassName, "width" )=='100px'`,
					`Style.get( eTestClassId, "width" )=='100px'`,
					`Style.get( eTestStyle, "width" )=='100px'`,
					`Style.get( eTestCssText, "width" )=='100px'`
					]},
			{ title:"height",
				eval:
`eTestStyle.style.height="100px"
eTestCssText.style.cssText = "height: 100px;"`,
				assertions:[
					`Style.get( eTestClassName, "height" )=='100px'`,
					`Style.get( eTestClassId, "height" )=='100px'`,
					`Style.get( eTestStyle, "height" )=='100px'`,
					`Style.get( eTestCssText, "height" )=='100px'`
					]},
			{ title:"left",
				eval:
`eTestStyle.style.left="10px"
eTestCssText.style.cssText = "left: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "left" )=='10px'`,
					`Style.get( eTestClassId, "left" )=='10px'`,
					`Style.get( eTestStyle, "left" )=='10px'`,
					`Style.get( eTestCssText, "left" )=='10px'`
					]},
			{ title:"top",
				eval:
`eTestStyle.style.top="10px"
eTestCssText.style.cssText = "top: 10px;"`,
				assertions:[
					`Style.get( eTestClassName, "top" )=='10px'`,
					`Style.get( eTestClassId, "top" )=='10px'`,
					`Style.get( eTestStyle, "top" )=='10px'`,
					`Style.get( eTestCssText, "top" )=='10px'`
					]},
			]
		},
	{ title:"Style.getNameSpaceCSS",
		assertions:[
			`Style.getNameSpaceCSS("testTestTest")=='test-test-test'`,
			`Style.getNameSpaceCSS("borderBottomRightRadius")=='border-bottom-right-radius'`,
			`Style.getNameSpaceCSS("backgroundPosition")=='background-position'`,
			`Style.getNameSpaceCSS("fontWeigth")=='font-weigth'`,
			`Style.getNameSpaceCSS("opacity")=='opacity'`,
			`Style.getNameSpaceCSS("padding")=='padding'`
			]
		},
	{ title:"Style.getNameSpaceJS",
		assertions:[
			`Style.getNameSpaceJS("test-test-test")=='testTestTest'`,
			`Style.getNameSpaceJS("border-bottom-right-radius")=='borderBottomRightRadius'`,
			`Style.getNameSpaceJS("background-position")=='backgroundPosition'`,
			`Style.getNameSpaceJS("font-weigth")=='fontWeigth'`,
			`Style.getNameSpaceJS("opacity")=='opacity'`,
			`Style.getNameSpaceJS("padding")=='padding'`
			]
		},
	{ title:"Style.set",
		assertions:[
			`Style.set( eTest, "font-size:15px; width:20px;")=='font-size: 15px; width: 20px;'`,
			`Style.set( eTest, "font-size:20px; color:red;")=='font-size: 20px; width: 20px; color: red;'`
			]
		},
	{ title:"Style.remove",
		assertions:[
			`Style.remove( eTest, "font-size")== 'width: 20px; color: red;'`,
			`Style.remove( eTest, "color")== 'width: 20px;'`,
			`Style.remove( eTest, "width")== ''`,
		
			]
		},
	{ title:"Style.validate",
		list:[
			{ title:"background-position",
				assertions:[
					`Style.validate("background-position",'20px 30px')=='background-position:20px 30px;'`,
					`Style.validate("background-position",'-20px -30px')=='background-position:-20px -30px;'`
					]},
			{ title:"font-size",
				assertions:[
					`Style.validate("font-size",-1)=='font-size:0px;'`,
					`Style.validate("font-size",1)=='font-size:1px;'`,
					`Style.validate("font-size",10)=='font-size:10px;'`,
					`Style.validate("font-size",10.5)=='font-size:10px;'`
					]},
			{ title:"font-weight",
				assertions:[
					`Style.validate("font-weight",-1)=='font-weight:0;'`,
					`Style.validate("font-weight",1)=='font-weight:1;'`,
					`Style.validate("font-weight",10)=='font-weight:10;'`,
					`Style.validate("font-weight",10.5)=='font-weight:10;'`
					]},
			{ title:"height",
				assertions:[
					`Style.validate("height",-10)=='height:0px;'`,
					`Style.validate("height",0)=='height:0px;'`,
					`Style.validate("height",10)=='height:10px;'`,
					`Style.validate("height",10.5)=='height:10px;'`
					]},
			{ title:"opacity",
				assertions:[
					`Style.validate("opacity",-1)=='opacity:0;'`,
					`Style.validate("opacity",0)=='opacity:0;'`,
					`Style.validate("opacity",.5)=='opacity:0.50;'`,
					`Style.validate("opacity",1)=='opacity:1;'`,
					`Style.validate("opacity",2)=='opacity:1;'`
					]},
			{ title:"width",
				assertions:[
					`Style.validate("width",-10)=='width:0px;'`,
					`Style.validate("width",0)=='width:0px;'`,
					`Style.validate("width",10)=='width:10px;'`,
					`Style.validate("width",10.5)=='width:10px;'`
					]},
			]
		},
	],
	{ unittest:1, benchmark: 1 }
	)

layoutDoc( eSummary2, { numbers: false, links: true }, eUnitTest )


/*
Une fois le code charger, afficher de la page d'accueil !!
... sans setTimeout SVP !
*/
setTimeout( ()=>goTo( eDoc ), 10 )
</script>

</body>
</html>