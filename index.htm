<!DOCTYPE HTML>
<html>
<head>
	<title>JS.Game - Page</title>
	<meta charset="UTF-8">
	<link rel="stylesheet" type="text/css" href="css/page.css">
	<link rel="stylesheet" type="text/css" href="css/doc.css">
	<link rel="stylesheet" type="text/css" href="css/unittest.css">
</head>
<body>

<page id="ePreload">
	chargement...
</page>

<page id="eDoc">
	<a href="#" onclick="goTo( eUnitTest )">Testes unitaires</a> - <a href="#" onclick="goTo( eBenchmarking )">Benchmarking</a>
	<h1>Objet Color</h1>

	<div id="eSummary1"></div>

	<section>
		<p>La fonction <var>Color</var> créée un objet Color d'un certain type (Color.hex, Color.rgb,...) pouvant être converti en n'importe quel autre type.</p>

		<h6>Exemples d'utilisation:</h6>
		<code>
			let oColor1 = Color( 'FFCC00' )<br>
			let oColor2 = Color.hex( '#FC0' )<br>
			let oColor3 = Color.rgb( 255, 127, 0, 0.5 )
		</code>

		<p>L'argument de la fonction <var>Color</var> est soit :</p>
		<ul>
			<li>Une chaine contenant un type de couleur.
				<ul>
					<li>L'analyse est insensible à la casse et ignore les espaces.</li>
					<li>Si plusieurs valeurs se suivent séparés par un espace, seul la première valeur est prise en compte.</li>
				</ul>
			</li>
			<li>Un objet Color, alors il retourne cet objet.</li>
		</ul>
		<p>La valeur retournée dépend de l'analyse de la chaîne (<var>Color.hex</var>, <var>Color.rgb</var>,... ).</p>

		<dl>
			<dt><b>Color.hex</b>
				<br>Formats supportés : <i>"FC0", "#FC0", "FFCC00", "#FFCC00"</i>.
				<br>Couleur hexadécimal (RGB).</dt>
			<dt><b>Color.rgb</b>
				<br>Format supporté : <i>"rgb(1,12,200)", "rgba(1,12,200,0.5)"</i>, ...
				<br>Couleur formée des attributs r(rouge), v(vert) et b(bleu); et a(son opacité) en option.</dt>
			<dt><b>Color.hsv</b>
				<br>Format supporté :<i>"hsv(300,50,50)", "hsva(300,50,50,0.5)"</i>, ...
				<br>Couleur formée des attributs h(hue ou teinte), s(saturation) et v(value ou valeur); et a(son opacité) en option.</dt>
			<dt><b>Color.hsl</b>
				<br>Format supporté :<i>"hsl(300,50,50)", "hsla(300,50,50,0.5)"</i>, ...
				<br>Couleur formée des attributs h(hue ou teinte), s(saturation) et l(lightness ou lumière); et a(son opacité) en option.</dt>
			<dt><b>Color.cmyk</b>
				<br>Format supporté : <i>"cmyk(50,50,50,50)"</i>, ...
				<br>Couleur formée des attributs c(Cyan), m(Magenta), y(Yellow) et k(Gris...).</dt>
		</dl>

		<h6>Notes:</h6>
		<p>La valeur de l'opacité est perdue lors de la conversions en Color.hex ou Color.cmyk.</p>
		<dl>
			<dt><b>valeur r, g ou b</b>
				<br>Nombre variant de 0 à 255.</dt>
			<dt><b>valeur h (hue)</b>
				<br>Nombre variant de 0 à 359.</dt>
			<dt><b>valeurs pourcentages s, v, l, c, m, y et k</b>
				<br>Nombre variant de 0 à 100.</dt>
			<dt><b>valeur a (opacité)</b>
				<br>Nombre variant de 0 à 1.</dt>
		</dl>
		<p>Par défaut, les valeurs devant être comprises entre un certain intervalle sont contrainte dedans.</p>
	</section>

	<section><h2>Méthodes objet Color</h2>
		<section><h3>Color.hex ( sHEX )</h3>
			<p>Crée un objet <var>Color.hex</var> depuis une valeur hexadécimal.</p>
			<dl>
				<dt><var>sHEX</var> <i>String</i> - Valeur hexadécimale.</dt>
			</dl>
			
			<p>Retourne un objet String à 6 caractères étendu avec <code>{ mode:'hex' }</code></p>
		</section>
		<section><h3>Color.rgb ( r, g, b [, a ])</h3>
			<p>Crée un objet <var>Color.rgb</var>.</p>
			<dl>
				<dt><var>r</var> <i>Number</i> - Valeur rouge.</dt>
				<dt><var>g</var> <i>Number</i> - Valeur verte.</dt>
				<dt><var>b</var> <i>Number</i> - Valeur bleue.</dt>
				<dt><var>a</var> <i>Number</i> - optionnel - Valeur opacitée.</dt>
			</dl>
			<p>Objet créé = <code>{ r:0..255, g:0..255, b:0..255, a:(null||1), mode:('rgb'||'rgba') }</code></p>
		</section>
		<section><h3>Color.hsv ( h, s, v [, a ])</h3>
			<p>Crée un objet <var>Color.hsv</var>.</p>
			<dl>
				<dt><var>h</var> <i>Number</i> - Valeur hue.</dt>
				<dt><var>s</var> <i>Number</i> - Valeur saturation.</dt>
				<dt><var>v</var> <i>Number</i> - Valeur value.</dt>
				<dt><var>a</var> <i>Number</i> - optionnel - Valeur opacitée.</dt>
			</dl>
			<p>Objet créé = <code>{ h:0..359, s:0..100, v:0..100, a:(null||1), mode:('hsv'||'hsva') }</code></p>
		</section>
		<section><h3>Color.hsl ( h, s, l [, a ])</h3>
			<p>Crée un objet <var>Color.hsl</var>.</p>
			<dl>
				<dt><var>h</var> <i>Number</i> - Valeur hue.</dt>
				<dt><var>s</var> <i>Number</i> - Valeur saturation.</dt>
				<dt><var>l</var> <i>Number</i> - Valeur lightness.</dt>
				<dt><var>a</var> <i>Number</i> - optionnel - Valeur opacitée.</dt>
			</dl>
			<p>Objet créé = <code>{ h:0..359, s:0..100, l:0..100, a:(null||1), mode:('hsl'||'hsla') }</code></p>
		</section>
		<section><h3>Color.cmyk ( c, m, y, k )</h3>
			<p>Crée un objet <var>Color.cmyk</var>.</p>
			<dl>
				<dt><var>c</var> <i>Number</i> - Valeur cyan.</dt>
				<dt><var>m</var> <i>Number</i> - Valeur magenta.</dt>
				<dt><var>y</var> <i>Number</i> - Valeur yellow.</dt>
				<dt><var>k</var> <i>Number</i> - Valeur grises.</dt>
			</dl>
			<p>Objet créé = <code>{ c:0..100, m:0..100, y:0..100, k:0..100, mode:'cmyk' }</code></p>
		</section>
		<section><h3>Color.contrast ( oColor1, oColor2 )</h3>
			<p>Indique si deux couleurs contrastes entre elles.</p>
			<dl>
				<dt><var>oColor1</var> <i>Color</i>.</dt>
				<dt><var>oColor2</var> <i>Color</i>.</dt>
			</dl>
			<p>Retourne un <code>true</code> si c'est le cas, <code>false</code> sinon.</p>
		</section>
		<section><h3>Color.getWebSafe ( mColor )</h3>
			<p>Retourne un couleur dit 'WebSafe'.</p>
			<dl>
				<dt><var>mColor</var> <i>String</i> ou <i>Color</i>.</dt>
			</dl>
			<p>Retourne une valeur hexadecimale format chaîne 'FFCC00'.</p>
		</section>
		<section><h3>Color.inRange ( n, s )</h3>
			<p>Sert à conserver un nombre dans l'intervalle d'un attribut couleur.</p>
			<dl>
				<dt><var>n</var> <i>Number</i> - Un nombre.</dt>
				<dt><var>s</var> <i>String</i> - attribut couleur : r,g,b,h,s,v,l,c,y,m ou k.</dt>
			</dl>
			<p>Retourne une valeur comprise dans l'intervalle de l'attribut ou <code>null</code>.</p>
		</section>
		<section><h3>Color.visibleColor ( oColor )</h3>
			<p>Recherche une couleur contrastante avec la couleur <code>oColor</code>.</p>
			<dl>
				<dt><var>oColor</var> <i>Color</i>.</dt>
			</dl>
			<p>Retourne une couleur hexadécimale de six caractères prefixé avec '#'.</p>
		</section>
		<section><h3>Color.visibleColors ( oColor )</h3>
			<p>Recherche des couleurs contrastantes avec la couleur <code>oColor</code>.</p>
			<dl>
				<dt><var>oColor</var> <i>Color</i>.</dt>
			</dl>
			<p>Retourne un tableau de couleurs hexadécimales de six caractères prefixé avec '#'.</p>
		</section>
	</section>
	<section><h2>Méthodes des 'instances'</h2>
		<p>Tous les objets Color différents possèdent ces méthodes. </p>
		<section><h3>oColor.toString( [ sType ] )</h2>
			<p>Transforme l'objet Color en chaine de caractère. </p>
			<dl>
				<dt><var>sType</var> <i>String</i> - optionnel -
					<ul>
						<li>indique qu'il faut ajouter le symbole '%' aux valeurs pourcentages.</li>
						<li>indique pour les <var>Color.hex</var> le symbole préfixe... '#' idéalement.</li>
					</ul>
				</dt>
			</dl>
			<p>Retourne une chaine de caractère. </p>
		</section>
		<section><h3>oColor.toWeb()</h2>
			<p>Retourne une couleur hexadécimale au format "#FFCC00".</p>
		</section>
		<section><h3>oColor.toHEX()</h2>
			<p>Transforme l'objet Color en Color.hex.</p>
		</section>
		<section><h3>oColor.toRGB()</h2>
			<p>Transforme l'objet Color en Color.rgb.</p>
		</section>
		<section><h3>oColor.toHSV()</h2>
			<p>Transforme l'objet Color en Color.hsv.</p>
		</section>
		<section><h3>oColor.toHSL()</h2>
			<p>Transforme l'objet Color en Color.hsl.</p>
		</section>
		<section><h3>oColor.toCMYK()</h2>
			<p>Transforme l'objet Color en Color.cmyk.</p>
		</section>
	</section>
</page>

<page id="eUnitTest">
	<a href="#" onclick="goTo( eDoc )">Documentation</a> - <a href="#" onclick="goTo( eBenchmarking )">Benchmarking</a>
	<h1>Testes unitaires</h1>

	<div id="eSummary2"></div>

</page>

<page id="eBenchmarking">
	<a href="#" onclick="goTo( eDoc )">Documentation</a> - <a href="#" onclick="goTo( eUnitTest )">Testes unitaires</a>
	<h1>Benchmarking</h1>
</page>



<script src="Color.js"></script>
<script src="js/page.js"></script>
<script src="js/doc.js"></script>
<script src="js/unittest.js"></script>
<script>
/*
La page est en chargement
Insérer le code à charger ci-dessous
*/

layoutDoc( eSummary1, { numbers: false, links: true }, eDoc )

new UnitTest( eUnitTest,[
	{ desc:"<h2>Analyse des chaînes</h2>",
		eval:[
			`
window.f = ( s1, s2, sMode ) =>{
	let oColor = Color( s1 )
	return oColor.toString() == s2
		&& oColor.mode == sMode
	}`
			] 
		},
	{ title:"Color &rarr; Color.hex",
		eval:[],
		assertions:[
			`f( "FC0" , "FFCC00", 'hex' )`,
			`f( "#FC0" , "FFCC00", 'hex')`,
			`f( "FFCC00" , "FFCC00", 'hex')`,
			`f( "#FFCC00" , "FFCC00", 'hex')`
			]
		},
	{ title:"Color &rarr; Color.rgb",
		assertions:[
			`f( "rgb( 1, 12, 200 )" , "rgb(1,12,200)" , 'rgb' )`,
			`f( "rgb( -10, -10, -10 )" , "rgb(0,0,0)" , 'rgb' )`,
			`f( "rgb( 256, 256, 256 )" , "rgb(255,255,255)" , 'rgb' )`,
			`f( "rgba( 1, 12, 200, 0.5 )" , "rgba(1,12,200,0.5)" , 'rgba' )`,
			`f( "rgba( 1, 12, 200, 2 )" , "rgba(1,12,200,1)" , 'rgba' )`
			]
		},
	{ title:"Color &rarr; Color.hsv",
		assertions:[
			`f( "hsv( 300, 50, 50 )" , "hsv(300,50,50)" , 'hsv' )`,
			`f( "hsv( -10, -10, -10 )" , "hsv(0,0,0)" , 'hsv' )`,
			`f( "hsv( 360, 101, 101 )" , "hsv(359,100,100)" , 'hsv' )`,
			`f( "hsva( 300, 50, 50, 0.5 )" , "hsva(300,50,50,0.5)" , 'hsva' )`,
			`f( "hsva( 300, 50, 50, 2 )" , "hsva(300,50,50,1)" , 'hsva' )`
			]
		},
	{ title:"Color &rarr; Color.hsl",
		assertions:[
			`f( "hsl( 300, 50, 50 )" , "hsl(300,50,50)" , 'hsl' )`,
			`f( "hsl( -10, -10, -10 )" , "hsl(0,0,0)" , 'hsl' )`,
			`f( "hsl( 360, 101, 101 )" , "hsl(359,100,100)" , 'hsl' )`,
			`f( "hsla( 300, 50, 50, 0.5 )" , "hsla(300,50,50,0.5)" , 'hsla' )`,
			`f( "hsla( 300, 50, 50, 2 )" , "hsla(300,50,50,1)" , 'hsla' )`
			]
		},
	{ title:"Color &rarr; Color.cmyk",
		assertions:[
			`f( "cmyk( 50, 50, 50, 50 )" , "cmyk(50,50,50,50)" , 'cmyk' )`,
			`f( "cmyk( -1, -1, -1, -1 )" , "cmyk(0,0,0,0)" , 'cmyk' )`,
			`f( "cmyk( 101, 101, 101, 101 )" , "cmyk(100,100,100,100)" , 'cmyk' )`
			]
		},
		
	{ desc:"<h2>Structure des objets créés</h2>",
		eval:[
			`
window.f = ( sMode, v1, v2, v3, v4 ) =>{
	window.oColor = Color[sMode]( v1, v2, v3, v4 )
	return oColor.mode
		&& oColor.toString
		&& oColor.toWeb
		&& oColor.toHEX
		&& oColor.toRGB
		&& oColor.toHSV
		&& oColor.toHSL
		&& oColor.toCMYK
	}`
			]
		},
	{ title:"Color.hex",
		eval:[],
		assertions:[
			`f( 'hex', "7F3F3F" )`,
			`oColor.mode == 'hex'`,
			]
		},
	{ title:"Color.rgb",
		assertions:[
			`f( 'rgb', 127, 63, 63 )`,
			`oColor.mode == 'rgb'`,
			`oColor.r == 127`,
			`oColor.g == 63`,
			`oColor.b == 63`,
			`oColor.a == null`,
			`f( 'rgb' , 127, 63, 63, .5 )`,
			`oColor.mode == 'rgba'`,
			`oColor.a == .5`
			]
		},
	{ title:"Color.hsv",
		assertions:[
			`f( 'hsv', 0, 50, 50 )`,
			`oColor.mode == 'hsv'`,
			`oColor.h == 0`,
			`oColor.s == 50`,
			`oColor.v == 50`,
			`oColor.a == null`,
			`f( 'hsv' , 0, 50, 50, .5 )`,
			`oColor.mode == 'hsva'`,
			`oColor.a == .5`
			]
		},
	{ title:"Color.hsl",
		assertions:[
			`f( 'hsl', 0, 34, 37 )`,
			`oColor.mode == 'hsl'`,
			`oColor.h == 0`,
			`oColor.s == 34`,
			`oColor.l == 37`,
			`oColor.a == null`,
			`f( 'hsl' , 0, 34, 37, .5 )`,
			`oColor.mode == 'hsla'`,
			`oColor.a == .5`
			]
		},
	{ title:"Color.cmyk",
		assertions:[
			`f( 'cmyk', 50 , 50 , 50 , 50 )`,
			`oColor.mode == 'cmyk'`,
			`oColor.c == 50`,
			`oColor.m == 50`,
			`oColor.y == 50`,
			`oColor.k == 50`
			]
		},
		
	{ desc:"<h2>Méthodes des objets créés</h2>",
		eval:[
			`
window.f = ( sMode, v1, v2, v3, v4 ) =>{
	window.oColor = Color[sMode]( v1, v2, v3, v4 )
	return oColor.mode
		&& oColor.toWeb() == '#00FF00'
	}
window.f2 = ( sName, sMode ) =>{
	let oColor = window.oColor[ sName ]()
	return oColor.mode == sMode
		&& oColor.toWeb() == '#00FF00'
	}`
			]
		},
	{ title:"Color.hex",
		eval:[],
		assertions:[
			`f( 'hex', "00FF00" )`,
			`oColor.toString() == '00FF00'`,
			`oColor.toString('@') == '@00FF00'`,
			`oColor.toString('#') == '#00FF00'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgb' )`,
			`f2( 'toHSV', 'hsv' )`,
			`f2( 'toHSL', 'hsl' )`,
			`f2( 'toCMYK', 'cmyk' )`
			]
		},
	{ title:"Color.rgb",
		assertions:[
			`f( 'rgb', 0, 255, 0 )`,
			`oColor.toString() == 'rgb(0,255,0)'`,
			`oColor.toString('#') == 'rgb(0%,100%,0%)'`,
			`oColor.toString('%') == 'rgb(0%,100%,0%)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgb' )`,
			`f2( 'toHSV', 'hsv' )`,
			`f2( 'toHSL', 'hsl' )`,
			`f2( 'toCMYK', 'cmyk' )`,
			`f( 'rgb', 0, 255, 0, .5 )`,
			`oColor.toString() == 'rgba(0,255,0,0.5)'`,
			`oColor.toString('#') == 'rgba(0%,100%,0%,0.5)'`,
			`oColor.toString('%') == 'rgba(0%,100%,0%,0.5)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgba' )`,
			`f2( 'toHSV', 'hsva' )`,
			`f2( 'toHSL', 'hsla' )`,
			`f2( 'toCMYK', 'cmyk' )`
			]
		},
	{ title:"Color.hsv",
		assertions:[
			`f( 'hsv', 119.67, 100, 100 )`,
			`oColor.toString() == 'hsv(120,100,100)'`,
			`oColor.toString('_') == 'hsv(120,100%,100%)'`,
			`oColor.toString('%') == 'hsv(120,100%,100%)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgb' )`,
			`f2( 'toHSV', 'hsv' )`,
			`f2( 'toHSL', 'hsl' )`,
			`f2( 'toCMYK', 'cmyk' )`,
			`f( 'hsv', 119.67, 100, 100, .5 )`,
			`oColor.toString() == 'hsva(120,100,100,0.5)'`,
			`oColor.toString('_') == 'hsva(120,100%,100%,0.5)'`,
			`oColor.toString('%') == 'hsva(120,100%,100%,0.5)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgba' )`,
			`f2( 'toHSV', 'hsva' )`,
			`f2( 'toHSL', 'hsla' )`,
			`f2( 'toCMYK', 'cmyk' )`
			]
		},
	{ title:"Color.hsl",
		assertions:[
			`f( 'hsl', 119.67, 100, 50 )`,
			`oColor.toString() == 'hsl(120,100,50)'`,
			`oColor.toString('@') == 'hsl(120,100%,50%)'`,
			`oColor.toString('%') == 'hsl(120,100%,50%)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgb' )`,
			`f2( 'toHSV', 'hsv' )`,
			`f2( 'toHSL', 'hsl' )`,
			`f2( 'toCMYK', 'cmyk' )`,
			`f( 'hsl', 119.67, 100, 50, .5 )`,
			`oColor.toString() == 'hsla(120,100,50,0.5)'`,
			`oColor.toString('@') == 'hsla(120,100%,50%,0.5)'`,
			`oColor.toString('%') == 'hsla(120,100%,50%,0.5)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgba' )`,
			`f2( 'toHSV', 'hsva' )`,
			`f2( 'toHSL', 'hsla' )`,
			`f2( 'toCMYK', 'cmyk' )`
			]
		},
	{ title:"Color.cmyk",
		assertions:[
			`f( 'cmyk', 100 , 0 , 100 , 0 )`,
			`oColor.toString() == 'cmyk(100,0,100,0)'`,
			`oColor.toString('&') == 'cmyk(100%,0%,100%,0%)'`,
			`oColor.toString('%') == 'cmyk(100%,0%,100%,0%)'`,
			`f2( 'toHEX', 'hex' )`,
			`f2( 'toRGB', 'rgb' )`,
			`f2( 'toHSV', 'hsv' )`,
			`f2( 'toHSL', 'hsl' )`,
			`f2( 'toCMYK', 'cmyk' )`
			]
		}
	])


layoutDoc( eSummary2, { numbers: true, links: true }, eUnitTest )
/*
Une fois le code charger, afficher de la page d'accueil !!
... sans setTimeout SVP !
*/
setTimeout( ()=>goTo( eDoc ), 10 )
</script>

</body>
</html>